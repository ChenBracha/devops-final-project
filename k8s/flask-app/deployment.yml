apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
  namespace: budget-app
  labels:
    app: flask-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        image: ghcr.io/chenbracha/devops-final-project:sha-af7073e
        imagePullPolicy: Always  # Pull from GHCR registry (auto-updated by CI/CD)
        ports:
        - containerPort: 5000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: flask-secret
              key: DATABASE_URL
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: flask-secret
              key: SECRET_KEY
        - name: FLASK_ENV
          valueFrom:
            secretKeyRef:
              name: flask-secret
              key: FLASK_ENV
        - name: GOOGLE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: flask-secret
              key: GOOGLE_CLIENT_ID
        - name: GOOGLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: flask-secret
              key: GOOGLE_CLIENT_SECRET
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /api/health
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /api/health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c']
        args:
        - |
          until pg_isready -h postgres-service -p 5432 -U app; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!" 